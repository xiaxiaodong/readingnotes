module 模块

此模块主要功能是加载其他模块

api:
    require
        引用其他模块
    module.export
        本模块开放给别的模块的函数

require引用模块时,提取出模块文件后,后在外层包装一层函数来执行
    (function( exports, require, module , __filename , __dirname ){
        // 模块文件中的代码
    });
这样,内部的变量不会影响全局的变量,当node执行一个js文件时,也是当这个文件为 main模块来处理的
main模块加载的其他模块,是作为main的children的存在

注意:
    exports 只是 module.exports 的引用,如果被赋予对象,会失去本身的作用

原理:
    从 Y 路径的模块 require(X)
        1. 如果 X 是一个核心模块，
           a. 返回核心模块
           b. 结束
        2. 如果 X 是以 '/' 开头
           a. 设 Y 为文件系统根目录
        3. 如果 X 是以 './' 或 '/' 或 '../' 开头
           a. 加载文件(Y + X)
           b. 加载目录(Y + X)
        4. 加载Node模块(X, dirname(Y))
        5. 抛出 "未找到"

        加载文件(X)
        1. 如果 X 是一个文件，加载 X 作为 JavaScript 文本。结束
        2. 如果 X.js 是一个文件，加载 X.js 作为 JavaScript 文本。结束
        3. 如果 X.json 是一个文件，解析 X.json 成一个 JavaScript 对象。结束
        4. 如果 X.node 是一个文件，加载 X.node 作为二进制插件。结束

        加载索引(X)
        1. 如果 X/index.js 是一个文件，加载 X/index.js 作为 JavaScript 文本。结束
        3. 如果 X/index.json  是一个文件，解析 X/index.json 成一个 JavaScript 对象。结束
        4. 如果 X/index.node 是一个文件，加载 X/index.node 作为二进制插件。结束

        加载目录(X)
        1. 如果 X/package.json 是一个文件，
           a. 解析 X/package.json，查找 "main" 字段
           b. let M = X + (json main 字段)
           c. 加载文件(M)
           d. 加载索引(M)
        2. 加载索引(X)

        加载Node模块(X, START)
        1. let DIRS=NODE_MODULES_PATHS(START)
        2. for each DIR in DIRS:
           a. 加载文件(DIR/X)
           b. 加载目录(DIR/X)

        NODE_MODULES_PATHS(START)
        1. let PARTS = path split(START)
        2. let I = count of PARTS - 1
        3. let DIRS = []
        4. while I >= 0,
           a. if PARTS[I] = "node_modules" CONTINUE
           b. DIR = path join(PARTS[0 .. I] + "node_modules")
           c. DIRS = DIRS + DIR
           d. let I = I - 1
        5. return DIRS