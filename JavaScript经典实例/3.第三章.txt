第三章 函数JavaScript的构件块

3.1 放置函数并提升
    
    有3种基本的方式可以创建函数
        声明式函数
            通过function关键字触发的一条语句,js程序初次载入时解析
            
        匿名函数或函数构造函数
            匿名函数是使用new运算符构造的,引用Function对象
            
        函数字面量或函数表达式
            
    主要是注意函数的作用域范围,了解js程序执行的顺序.
    在一个作用域内,所有的定义语句是第一批次执行的,之后会从上往下执行.
    
3.2 把一个函数作为参数传递给另一个函数
    
    function a(x,y){
        b(x,y);
    }
    
3.3 实现递归算法
    
    函数对某一入参进行检测或修改,不满足自身执行条件是,调用自身并传入修改后的入参
    /* 求阶层 可通过记忆来做优化*/
    function x(a){
        return a==1?1:a*x(a-1);/* 回调足够多时,会导致内存耗尽 解决办法:改为 if else */
    }
    大多数递归函数都可以替换:通过某种循环,线性的执行同样的函数.
    递归的优点: 更快更高效,更符合函数式编程泛型(代码更具有可读性和一致性)
    
** 3.4 使用一个定时器和回调放置代码阻塞
    
    setTimeout()将被添加到事件队列的末尾,在同一队列的其他功能之后处理.
    回调及在等待进程或事件的同时不阻塞
    
    
3.5 创建能够记住其状态的函数
    
    通过闭包来完成.
    var name = function(name){
        return function(){ return name; }
    }
    var getName = name('hello');
    
3.6 把一个函数传参转换到一个数组中
    
    function someFunc(){
        var args = [].slice.call(arguments);
        或者
        var args = [].concat.apply([],arguments);
    }
    
3.7 使用一个局部应用减少冗余性
    
    将功能函数化,减少代码的重复编写.
    更多的来源是思考,比如react,angular这些类型的框架都起到了减少冗余性的作用,但会增加一大部分公司不需要的其余代码.
    在掌握这些框架的情况下,进行核心提炼是一个不错的办法.
    
3.8 使用缓存计算来提高应用程序性能
    
    在迭代或者递归时,若有大量计算是重复计算,就可以用一个对象将重复值保存起来,避免下次再重复计算.
    
3.9 使用匿名函数包装全局变量
    
    利用IIFE函数作用包含全局变量
    
3.10 提供一个默认的参数
    
    ES 6 新增功能
        function a(a='默认值'){}
    